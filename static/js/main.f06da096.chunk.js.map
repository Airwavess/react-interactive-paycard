{"version":3,"sources":["components/Card/Card.component.tsx","components/CardForm/CardForm.component.tsx","pages/Paycard/Paycard.page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","cardSide","props","cardNumberRow","Array","from","length","forEach","_","idx","push","className","key","cardNumber","cardExpirationDate","replace","cardExpirationMonth","cardExpirationYear","src","alt","cardHolder","cardCVV","CardForm","handleRotateCard","dispatch","onSubmit","e","preventDefault","htmlFor","type","id","autoComplete","maxLength","value","onChange","newValue","target","test","payload","onFocus","name","defaultValue","disabled","map","reducer","state","action","newCardNumber","substr","slice","Error","Paycard","React","useReducer","cardState","useState","rotateCard","side","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f06da096.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.styles.scss\";\r\nimport { CardState } from \"../../pages/Paycard/Paycard.page\";\r\n\r\ninterface CardProps extends CardState {\r\n  cardSide: string;\r\n}\r\n\r\nconst Card: React.FC<CardProps> = ({ cardSide, ...props }) => {\r\n  // 卡片號碼\r\n  let cardNumberRow: Array<JSX.Element> = [];\r\n  Array.from({ length: 16 }).forEach((_, idx) => {\r\n    if (idx % 4 === 0 && idx > 0) {\r\n      cardNumberRow.push(\r\n        <span className=\"card__card-number--space\" key={`space-${idx}`}></span>\r\n      );\r\n    }\r\n\r\n    let cardNumber = \"#\";\r\n    if (idx < props.cardNumber.length) {\r\n      cardNumber = props.cardNumber[idx];\r\n    }\r\n\r\n    cardNumberRow.push(<span key={`number-${idx}`}>{cardNumber}</span>);\r\n  });\r\n\r\n  let cardExpirationDate = \"MM/YY\";\r\n  cardExpirationDate = cardExpirationDate.replace(\r\n    /MM/,\r\n    props.cardExpirationMonth || \"MM\"\r\n  );\r\n  cardExpirationDate = cardExpirationDate.replace(\r\n    /YY/,\r\n    props.cardExpirationYear || \"YY\"\r\n  );\r\n\r\n  return (\r\n    <div className={`card ${cardSide === \"back\" && \"card--is-flipped\"}`}>\r\n      <div className={`card__front`}>\r\n        <div className=\"card__background\">\r\n          <img src=\"https://i.imgur.com/5XHCjPT.jpg\" alt=\"\" />\r\n        </div>\r\n        <div className=\"card__top\">\r\n          <div className=\"card__chip-icon\">\r\n            <img src=\"https://i.imgur.com/7xhP2ZA.png\" alt=\"\" />\r\n          </div>\r\n          <div className=\"card__visa-icon\">\r\n            <img src=\"https://i.imgur.com/lokBLnp.png\" alt=\"\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"card__card-number\">{cardNumberRow}</div>\r\n        <div className=\"card__content\">\r\n          <div className=\"card__card-holder\">\r\n            <div className=\"card__card-holder-title\">Card Holder</div>\r\n            <div className=\"card__card-holder-name\">\r\n              {props.cardHolder || \"FULL NAME\"}\r\n            </div>\r\n          </div>\r\n          <div className=\"card__expires\">\r\n            <div className=\"card__expires-title\">Expires</div>\r\n            <div className=\"card__expires-date\">{cardExpirationDate}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className={`card__back ${\r\n          cardSide === \"back\" ? \"card__back--active\" : \"\"\r\n        }`}\r\n      >\r\n        <div className=\"card__background\">\r\n          <img src=\"https://i.imgur.com/5XHCjPT.jpg\" alt=\"\" />\r\n        </div>\r\n        <div className=\"card__top\">\r\n          <div className=\"card__black-line\"></div>\r\n        </div>\r\n        <div className=\"card__card-cvv\">\r\n          <div className=\"card__card-cvv-title\">{props.cardCVV || \"CVV\"}</div>\r\n          <div className=\"card__card-cvv-number\"></div>\r\n        </div>\r\n        <div className=\"card__bottom\">\r\n          <div className=\"card__visa-icon\">\r\n            <img src=\"https://i.imgur.com/lokBLnp.png\" alt=\"\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./CardForm.styles.scss\";\r\nimport { ReducerAction, CardState } from \"../../pages/Paycard/Paycard.page\";\r\n\r\ninterface CardFromProps extends CardState {\r\n  handleRotateCard: (side: string) => void;\r\n  dispatch: React.Dispatch<ReducerAction>;\r\n}\r\n\r\nconst CardForm: React.FC<CardFromProps> = ({\r\n  handleRotateCard,\r\n  dispatch,\r\n  ...props\r\n}) => {\r\n  const handleUpdateCardNumber = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newValue = e.target.value;\r\n    const re = /^\\d+$/;\r\n    if (newValue === \"\" || re.test(newValue)) {\r\n      dispatch({ type: \"updateCardNumber\", payload: e.target.value });\r\n    }\r\n  };\r\n\r\n  const handleUpdateCardCVV = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newValue = e.target.value;\r\n    const re = /^\\d+$/;\r\n    if (newValue === \"\" || re.test(newValue)) {\r\n      dispatch({ type: \"updateCardCVV\", payload: e.target.value });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <div className=\"card-form\">\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"card-number\">Card Number</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"card-number\"\r\n            autoComplete=\"off\"\r\n            maxLength={16}\r\n            value={props.cardNumber}\r\n            onChange={handleUpdateCardNumber}\r\n            onFocus={() => handleRotateCard(\"front\")}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"card-holder\">Card Holder</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"card-holder\"\r\n            autoComplete=\"off\"\r\n            maxLength={20}\r\n            onChange={(e) => {\r\n              dispatch({ type: \"updateCardHolder\", payload: e.target.value });\r\n            }}\r\n            onFocus={() => handleRotateCard(\"front\")}\r\n          />\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"form-group card-form__expiration-date\">\r\n            <label htmlFor=\"card-expiration-month\">Expiration Date</label>\r\n            <div className=\"row\">\r\n              <select\r\n                name=\"\"\r\n                id=\"card-expiration-month\"\r\n                defaultValue=\"Month\"\r\n                onChange={(e) => {\r\n                  dispatch({\r\n                    type: \"updateCardExpirationMonth\",\r\n                    payload: e.target.value,\r\n                  });\r\n                }}\r\n                onFocus={() => handleRotateCard(\"front\")}\r\n              >\r\n                <option disabled>Month</option>\r\n                {Array.from({ length: 12 }).map((_, idx) => (\r\n                  <option key={idx}>{idx + 1}</option>\r\n                ))}\r\n              </select>\r\n              <select\r\n                name=\"\"\r\n                id=\"card-expiration-year\"\r\n                defaultValue=\"Year\"\r\n                onChange={(e) => {\r\n                  dispatch({\r\n                    type: \"updateCardExpirationYear\",\r\n                    payload: e.target.value,\r\n                  });\r\n                }}\r\n                onFocus={() => handleRotateCard(\"front\")}\r\n              >\r\n                <option disabled>Year</option>\r\n                {Array.from({ length: 12 }).map((_, idx) => (\r\n                  <option key={idx}>{2020 + idx}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group card-form__card-cvv\">\r\n            <label htmlFor=\"card-cvv\">CVV</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"card-cvv\"\r\n              maxLength={3}\r\n              value={props.cardCVV}\r\n              onChange={handleUpdateCardCVV}\r\n              onFocus={() => handleRotateCard(\"back\")}\r\n            />\r\n          </div>\r\n        </div>\r\n        <button type=\"submit\" className=\"card-form__submit-btn\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardForm;\r\n","import React from \"react\";\r\nimport \"./Paycard.styles.scss\";\r\nimport Card from \"../../components/Card/Card.component\";\r\nimport CardForm from \"../../components/CardForm/CardForm.component\";\r\n\r\nexport interface CardState {\r\n  cardNumber: string;\r\n  cardHolder: string;\r\n  cardExpirationMonth: string;\r\n  cardExpirationYear: string;\r\n  cardCVV: string;\r\n}\r\n\r\nexport interface ReducerAction {\r\n  type: string;\r\n  payload: any;\r\n}\r\n\r\nfunction updateCardNumber(newCardNumber: string) {\r\n  if (newCardNumber.length > 16) {\r\n    return newCardNumber.substr(0, 16);\r\n  }\r\n\r\n  return newCardNumber;\r\n}\r\n\r\nfunction reducer(state: CardState, action: ReducerAction): CardState {\r\n  switch (action.type) {\r\n    case \"updateCardNumber\":\r\n      return { ...state, cardNumber: updateCardNumber(action.payload) };\r\n    case \"updateCardHolder\":\r\n      return { ...state, cardHolder: action.payload };\r\n    case \"updateCardExpirationMonth\":\r\n      return {\r\n        ...state,\r\n        cardExpirationMonth: (\"0\" + action.payload).slice(-2),\r\n      };\r\n    case \"updateCardExpirationYear\":\r\n      return { ...state, cardExpirationYear: action.payload.slice(2) };\r\n    case \"updateCardCVV\":\r\n      return { ...state, cardCVV: action.payload };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nconst Paycard = () => {\r\n  const initialCardState: CardState = {\r\n    cardNumber: \"\",\r\n    cardHolder: \"\",\r\n    cardExpirationMonth: \"\",\r\n    cardExpirationYear: \"\",\r\n    cardCVV: \"\",\r\n  };\r\n  const [cardState, dispatch] = React.useReducer(reducer, initialCardState);\r\n\r\n  const [cardSide, rotateCard] = React.useState(\"front\");\r\n  const handleRotateCard = (side: string) => {\r\n    rotateCard(side);\r\n  };\r\n\r\n  return (\r\n    <div className=\"paycard\">\r\n      <Card cardSide={cardSide} {...cardState} />\r\n      <CardForm\r\n        handleRotateCard={handleRotateCard}\r\n        dispatch={dispatch}\r\n        {...cardState}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paycard;\r\n","import React from 'react';\nimport './App.css';\nimport Paycard from './pages/Paycard/Paycard.page'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Paycard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}