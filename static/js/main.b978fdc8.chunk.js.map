{"version":3,"sources":["components/Card/Card.component.tsx","components/CardForm/CardForm.component.tsx","pages/Paycard/Paycard.page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","cardSide","handleSetFocusSection","handleSetIsInputFocused","props","cardNumberRow","Array","from","length","forEach","_","idx","includes","push","className","key","cardNumber","cardExpirationDate","replace","cardExpirationMonth","cardExpirationYear","focusBoxClass","focusSection","src","alt","onClick","cardHolder","cardCVC","CardForm","handleRotateCard","dispatch","isInputFocused","isInputFocusedRef","useRef","current","ccNumberRef","ccNameRef","ccExpMonthRef","ccExpYearRef","ccCVCRef","inputRefs","useMemo","setInputRefFocus","useCallback","split","i","a","substring","toUpperCase","b","focus","useEffect","handleInputBlur","setTimeout","onSubmit","e","preventDefault","htmlFor","type","id","autoComplete","maxLength","value","onChange","newCardNumber","target","trim","slice","test","payload","onFocus","onBlur","ref","autoFocus","name","defaultValue","disabled","map","newValue","reducer","state","action","Error","Paycard","React","useReducer","cardState","useState","rotateCard","setFocusSection","setIsInputFocused","section","bool","cardProps","cardFormProps","side","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b978fdc8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.styles.scss\";\r\nimport { CardState } from \"../../pages/Paycard/Paycard.page\";\r\n\r\ninterface CardProps extends CardState {\r\n  cardSide: string;\r\n  focusSection: string;\r\n  handleSetFocusSection: (section: string) => void;\r\n  isInputFocused: boolean;\r\n  handleSetIsInputFocused: (bool: boolean) => void;\r\n}\r\n\r\nconst Card: React.FC<CardProps> = ({\r\n  cardSide,\r\n  handleSetFocusSection,\r\n  handleSetIsInputFocused,\r\n  ...props\r\n}) => {\r\n  // 卡片號碼\r\n  let cardNumberRow: Array<JSX.Element> = [];\r\n  Array.from({ length: 19 }).forEach((_, idx) => {\r\n    if ([4, 9, 14].includes(idx)) {\r\n      cardNumberRow.push(\r\n        <span className=\"card__card-number--space\" key={`space-${idx}`}></span>\r\n      );\r\n    } else {\r\n      const cardNumber =\r\n        idx < props.cardNumber.length ? props.cardNumber[idx] : \"#\";\r\n      cardNumberRow.push(<span key={`card-number-${idx}`}>{cardNumber}</span>);\r\n    }\r\n  });\r\n\r\n  let cardExpirationDate = \"MM/YY\";\r\n  cardExpirationDate = cardExpirationDate.replace(\r\n    /MM/,\r\n    props.cardExpirationMonth || \"MM\"\r\n  );\r\n  cardExpirationDate = cardExpirationDate.replace(\r\n    /YY/,\r\n    props.cardExpirationYear || \"YY\"\r\n  );\r\n\r\n  const focusBoxClass = `card__focus-box--${props.focusSection}`;\r\n\r\n  return (\r\n    <div className={`card ${cardSide === \"back\" && \"card--is-flipped\"}`}>\r\n      <div className=\"card__front\">\r\n        <div className={`card__focus-box ${focusBoxClass}`} />\r\n        <div className=\"card__background\">\r\n          <img src=\"https://i.imgur.com/5XHCjPT.jpg\" alt=\"\" />\r\n        </div>\r\n        <div className=\"card__top\">\r\n          <div className=\"card__chip-icon\">\r\n            <img src=\"https://i.imgur.com/7xhP2ZA.png\" alt=\"\" />\r\n          </div>\r\n          <div className=\"card__visa-icon\">\r\n            <img src=\"https://i.imgur.com/lokBLnp.png\" alt=\"\" />\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"card__card-number\"\r\n          onClick={() => {\r\n            handleSetFocusSection(\"cc-number\");\r\n            handleSetIsInputFocused(true);\r\n          }}\r\n        >\r\n          {cardNumberRow}\r\n        </div>\r\n        <div className=\"card__content\">\r\n          <div\r\n            className=\"card__card-holder\"\r\n            onClick={() => {\r\n              handleSetFocusSection(\"cc-name\");\r\n              handleSetIsInputFocused(true);\r\n            }}\r\n          >\r\n            <div className=\"card__card-holder-title\">Card Holder</div>\r\n            <div className=\"card__card-holder-name\">\r\n              {props.cardHolder || \"FULL NAME\"}\r\n            </div>\r\n          </div>\r\n          <div\r\n            className=\"card__expires\"\r\n            onClick={() => {\r\n              handleSetFocusSection(\"cc-exp\");\r\n              handleSetIsInputFocused(true);\r\n            }}\r\n          >\r\n            <div className=\"card__expires-title\">Expires</div>\r\n            <div className=\"card__expires-date\">{cardExpirationDate}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"card__back\">\r\n        <div className={`card__focus-box ${focusBoxClass}`} />\r\n        <div className=\"card__background\">\r\n          <img src=\"https://i.imgur.com/5XHCjPT.jpg\" alt=\"\" />\r\n        </div>\r\n        <div className=\"card__top\">\r\n          <div className=\"card__black-line\"></div>\r\n        </div>\r\n        <div className=\"card__card-cvc\">\r\n          <div className=\"card__card-cvc-title\">{props.cardCVC || \"CVC\"}</div>\r\n          <div className=\"card__card-cvc-number\"></div>\r\n        </div>\r\n        <div className=\"card__bottom\">\r\n          <div className=\"card__visa-icon\">\r\n            <img src=\"https://i.imgur.com/lokBLnp.png\" alt=\"\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useEffect, useRef, useCallback, useMemo } from \"react\";\r\nimport \"./CardForm.styles.scss\";\r\nimport { ReducerAction, CardState } from \"../../pages/Paycard/Paycard.page\";\r\n\r\ninterface CardFromProps extends CardState {\r\n  handleRotateCard: (side: string) => void;\r\n  dispatch: React.Dispatch<ReducerAction>;\r\n  focusSection: string;\r\n  handleSetFocusSection: (section: string) => void;\r\n  isInputFocused: boolean;\r\n  handleSetIsInputFocused: (bool: boolean) => void;\r\n}\r\n\r\nconst CardForm: React.FC<CardFromProps> = ({\r\n  handleRotateCard,\r\n  focusSection,\r\n  handleSetFocusSection,\r\n  dispatch,\r\n  isInputFocused,\r\n  handleSetIsInputFocused,\r\n  ...props\r\n}) => {\r\n  const isInputFocusedRef = useRef(isInputFocused);\r\n  isInputFocusedRef.current = isInputFocused;\r\n\r\n  const ccNumberRef = useRef() as React.MutableRefObject<HTMLInputElement>;\r\n  const ccNameRef = useRef() as React.MutableRefObject<HTMLInputElement>;\r\n  const ccExpMonthRef = useRef() as React.MutableRefObject<HTMLSelectElement>;\r\n  const ccExpYearRef = useRef() as React.MutableRefObject<HTMLSelectElement>;\r\n  const ccCVCRef = useRef() as React.MutableRefObject<HTMLInputElement>;\r\n\r\n  type InputRefs = {\r\n    [index: string]: React.MutableRefObject<\r\n      HTMLInputElement | HTMLSelectElement\r\n    >;\r\n  };\r\n\r\n  const inputRefs: InputRefs = useMemo(\r\n    () => ({\r\n      ccNumberRef,\r\n      ccNameRef,\r\n      ccExpMonthRef,\r\n      ccExpYearRef,\r\n      ccCVCRef,\r\n    }),\r\n    [ccNumberRef, ccNameRef, ccExpMonthRef, ccExpYearRef, ccCVCRef]\r\n  );\r\n\r\n  const setInputRefFocus = useCallback(\r\n    (focusSection: string) => {\r\n      if (!focusSection) return;\r\n      if (focusSection === \"cc-exp\") focusSection = \"ccExpMonth\";\r\n      let key = focusSection.split(\"-\")[0];\r\n\r\n      for (let i = 1; i < focusSection.split(\"-\").length; i++) {\r\n        const a = focusSection.split(\"-\")[1].substring(0, 1).toUpperCase();\r\n        const b = focusSection.split(\"-\")[1].substring(1);\r\n        key = `${key}${a}${b}`;\r\n      }\r\n      key = `${key}Ref`;\r\n      inputRefs[key]?.current.focus();\r\n    },\r\n    [inputRefs]\r\n  );\r\n\r\n  const handleUpdateCardNumber = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const re = /^(\\d{0,4}\\s?){0,4}$/;\r\n\r\n    let newCardNumber = e.target.value.trim();\r\n    if ([5, 10, 15].includes(newCardNumber.length)) {\r\n      newCardNumber =\r\n        newCardNumber.slice(0, -1) + \" \" + newCardNumber.slice(-1);\r\n    }\r\n    if (newCardNumber === \"\" || re.test(newCardNumber)) {\r\n      dispatch({ type: \"updateCardNumber\", payload: newCardNumber });\r\n    }\r\n  };\r\n\r\n  const handleUpdateCardCVC = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newValue = e.target.value;\r\n    const re = /^\\d+$/;\r\n    if (newValue === \"\" || re.test(newValue)) {\r\n      dispatch({ type: \"updateCardCVC\", payload: e.target.value });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setInputRefFocus(focusSection);\r\n  }, [focusSection, setInputRefFocus]);\r\n\r\n  const handleInputBlur = () => {\r\n    setTimeout(() => {\r\n      if (!isInputFocusedRef.current) {\r\n        handleSetFocusSection(\"\");\r\n      }\r\n    }, 300);\r\n    handleSetIsInputFocused(false);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"card-form\">\r\n      <div className=\"form-group card-form__cc-number\">\r\n        <label htmlFor=\"card-number\">Card Number</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"card-number\"\r\n          autoComplete=\"off\"\r\n          maxLength={19}\r\n          value={props.cardNumber}\r\n          onChange={handleUpdateCardNumber}\r\n          onFocus={() => {\r\n            handleRotateCard(\"front\");\r\n            handleSetFocusSection(\"cc-number\");\r\n            handleSetIsInputFocused(true);\r\n          }}\r\n          onBlur={handleInputBlur}\r\n          ref={\r\n            inputRefs.ccNumberRef as React.MutableRefObject<HTMLInputElement>\r\n          }\r\n          autoFocus\r\n        />\r\n      </div>\r\n      <div className=\"form-group card-form__cc-name\">\r\n        <label htmlFor=\"card-holder\">Card Holder</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"card-holder\"\r\n          autoComplete=\"off\"\r\n          maxLength={20}\r\n          onChange={(e) => {\r\n            dispatch({ type: \"updateCardHolder\", payload: e.target.value });\r\n          }}\r\n          onFocus={() => {\r\n            handleRotateCard(\"front\");\r\n            handleSetFocusSection(\"cc-name\");\r\n            handleSetIsInputFocused(true);\r\n          }}\r\n          onBlur={handleInputBlur}\r\n          autoFocus={focusSection === \"cc-name\"}\r\n          ref={inputRefs.ccNameRef as React.MutableRefObject<HTMLInputElement>}\r\n        />\r\n      </div>\r\n      <div className=\"form-group card-form__cc-exp\">\r\n        <label htmlFor=\"card-expiration-month\">Expiration Date</label>\r\n        <div className=\"row\">\r\n          <select\r\n            name=\"\"\r\n            id=\"card-expiration-month\"\r\n            defaultValue=\"Month\"\r\n            onChange={(e) => {\r\n              dispatch({\r\n                type: \"updateCardExpirationMonth\",\r\n                payload: e.target.value,\r\n              });\r\n            }}\r\n            onFocus={() => {\r\n              handleRotateCard(\"front\");\r\n              handleSetFocusSection(\"cc-exp\");\r\n              handleSetIsInputFocused(true);\r\n            }}\r\n            onBlur={handleInputBlur}\r\n            ref={\r\n              inputRefs.ccExpMonthRef as React.MutableRefObject<\r\n                HTMLSelectElement\r\n              >\r\n            }\r\n          >\r\n            <option disabled>Month</option>\r\n            {Array.from({ length: 12 }).map((_, idx) => (\r\n              <option key={idx}>{idx + 1}</option>\r\n            ))}\r\n          </select>\r\n          <select\r\n            name=\"\"\r\n            id=\"card-expiration-year\"\r\n            defaultValue=\"Year\"\r\n            onChange={(e) => {\r\n              dispatch({\r\n                type: \"updateCardExpirationYear\",\r\n                payload: e.target.value,\r\n              });\r\n            }}\r\n            onFocus={() => {\r\n              handleRotateCard(\"front\");\r\n              handleSetFocusSection(\"cc-exp\");\r\n              handleSetIsInputFocused(true);\r\n            }}\r\n            onBlur={handleInputBlur}\r\n            ref={\r\n              inputRefs.ccExpYearRef as React.MutableRefObject<\r\n                HTMLSelectElement\r\n              >\r\n            }\r\n          >\r\n            <option disabled>Year</option>\r\n            {Array.from({ length: 12 }).map((_, idx) => (\r\n              <option key={idx}>{2020 + idx}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group card-form__cc-cvc\">\r\n        <label htmlFor=\"card-cvc\">CVC</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"card-cvc\"\r\n          maxLength={3}\r\n          value={props.cardCVC}\r\n          onChange={handleUpdateCardCVC}\r\n          onFocus={() => {\r\n            handleRotateCard(\"back\");\r\n            handleSetFocusSection(\"cc-cvc\");\r\n            handleSetIsInputFocused(true);\r\n          }}\r\n          onBlur={handleInputBlur}\r\n          ref={inputRefs.ccCVCRef as React.MutableRefObject<HTMLInputElement>}\r\n        />\r\n      </div>\r\n      <button type=\"submit\" className=\"card-form__submit-btn\">\r\n        Submit\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default CardForm;\r\n","import React from \"react\";\r\nimport \"./Paycard.styles.scss\";\r\nimport Card from \"../../components/Card/Card.component\";\r\nimport CardForm from \"../../components/CardForm/CardForm.component\";\r\n\r\nexport interface CardState {\r\n  cardNumber: string;\r\n  cardHolder: string;\r\n  cardExpirationMonth: string;\r\n  cardExpirationYear: string;\r\n  cardCVC: string;\r\n}\r\n\r\nexport interface ReducerAction {\r\n  type: string;\r\n  payload: any;\r\n}\r\n\r\nfunction reducer(state: CardState, action: ReducerAction): CardState {\r\n  switch (action.type) {\r\n    case \"updateCardNumber\":\r\n      return { ...state, cardNumber: action.payload };\r\n    case \"updateCardHolder\":\r\n      return { ...state, cardHolder: action.payload };\r\n    case \"updateCardExpirationMonth\":\r\n      return {\r\n        ...state,\r\n        cardExpirationMonth: (\"0\" + action.payload).slice(-2),\r\n      };\r\n    case \"updateCardExpirationYear\":\r\n      return { ...state, cardExpirationYear: action.payload.slice(2) };\r\n    case \"updateCardCVC\":\r\n      return { ...state, cardCVC: action.payload };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nconst Paycard = () => {\r\n  const initialCardState: CardState = {\r\n    cardNumber: \"\",\r\n    cardHolder: \"\",\r\n    cardExpirationMonth: \"\",\r\n    cardExpirationYear: \"\",\r\n    cardCVC: \"\",\r\n  };\r\n  const [cardState, dispatch] = React.useReducer(reducer, initialCardState);\r\n  const [cardSide, rotateCard] = React.useState(\"front\");\r\n  const [focusSection, setFocusSection] = React.useState(\"cc-number\");\r\n  const [isInputFocused, setIsInputFocused] = React.useState(true);\r\n\r\n  const handleRotateCard = (side: string) => {\r\n    rotateCard(side);\r\n  };\r\n\r\n  const handleSetFocusSection = (section: string) => {\r\n    setFocusSection(section);\r\n  };\r\n\r\n  const handleSetIsInputFocused = (bool: boolean) => {\r\n    setIsInputFocused(bool);\r\n  };\r\n\r\n  const cardProps = {\r\n    cardSide,\r\n    focusSection,\r\n    handleSetFocusSection,\r\n    isInputFocused,\r\n    handleSetIsInputFocused,\r\n    ...cardState,\r\n  };\r\n\r\n  const cardFormProps = {\r\n    handleRotateCard,\r\n    focusSection,\r\n    handleSetFocusSection,\r\n    isInputFocused,\r\n    handleSetIsInputFocused,\r\n    dispatch,\r\n    ...cardState,\r\n  };\r\n\r\n  return (\r\n    <div className=\"paycard\">\r\n      <Card {...cardProps} />\r\n      <CardForm {...cardFormProps} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paycard;\r\n","import React from 'react';\nimport './App.css';\nimport Paycard from './pages/Paycard/Paycard.page'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Paycard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}